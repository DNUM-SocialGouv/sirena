generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../generated/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model StatutEnum {
  id    String @id
  label String @unique

  users User[]
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique /// @zod.string.email({ message: 'Invalid email address' }),
  firstName String
  lastName  String
  uid       String  @unique
  sub       String  @unique
  active    Boolean @default(false)
  pcData    Json

  roleId String
  role   RoleEnum @relation(fields: [roleId], references: [id])

  statutId String
  statut   StatutEnum @relation(fields: [statutId], references: [id])

  entiteId String?
  entite   Entite? @relation(fields: [entiteId], references: [id])

  sessions   Session[]
  changeLogs ChangeLog[]
  uploads    UploadedFile[]
  notes      RequeteEtapeNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  pcIdToken String   @unique

  createdAt DateTime @default(now())
}

model Entite {
  id               String @id @default(uuid())
  nomComplet       String
  label            String
  email            String @default("")
  emailDomain      String @default("")
  organizationUnit String @default("")

  services Entite[] @relation("EntiteMereToServices")

  entiteTypeId String
  entiteType   EntiteTypeEnum @relation(fields: [entiteTypeId], references: [id])
  entiteMereId String?
  entiteMere   Entite?        @relation("EntiteMereToServices", fields: [entiteMereId], references: [id])

  requetes     Requete[]
  users        User[]
  uploads      UploadedFile[]
  RequeteEtape RequeteEtape[]
}

model EntiteTypeEnum {
  id    String @id
  label String @unique

  entites Entite[]
}

model RoleEnum {
  id    String @id
  label String @unique

  users User[]
}

model Requete {
  id            String    @id @default(uuid())
  numero        Int       @default(autoincrement())
  commentaire   String    @default("")
  receptionDate DateTime?
  dematSocialId Int?

  receptionTypeId String
  receptionType   ReceptionTypeEnum @relation(fields: [receptionTypeId], references: [id])

  Entite   Entite? @relation(fields: [entiteId], references: [id])
  entiteId String?

  declarant PersonneConcernee? @relation("DeclarantRequete")

  personnesConcernees PersonneConcernee[] @relation("ParticipantsRequete")

  demarchesEngagees DemarchesEngagees?

  etapes     RequeteEtape[]
  situations Situation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReceptionTypeEnum {
  id    String @id
  label String @unique

  requete Requete[]
}

model DemarchesEngagees {
  aContacte             Boolean?
  dateContact           DateTime?
  aRepondu              Boolean?
  aContacteAutre        Boolean?
  autreOrganisation     String    @default("")
  aDeposePlainte        Boolean?
  plainteDeposeDate     DateTime?
  plainteDeposeLocation String    @default("")
  commentaire           String    @default("")

  RequeteId String  @id
  Requete   Requete @relation(fields: [RequeteId], references: [id], onDelete: Cascade)
}

model PersonneConcernee {
  id                         String   @id @default(uuid())
  estNonIdentifiee           Boolean?
  estAnonyme                 Boolean?
  estHandicapee              Boolean?
  estIdentifie               Boolean?
  estVictime                 Boolean?
  estVictimeInformee         Boolean?
  victimeInformeeCommentaire String   @default("")
  veutGarderAnonymat         Boolean?
  commentaire                String   @default("")

  identite Identite? @relation("PersonneIdentite")

  ageId String?
  age   AgeEnum? @relation(fields: [ageId], references: [id])

  adresse Adresse? @relation("PersonneAdresse")

  civiliteId String?
  civilite   CiviliteEnum? @relation(fields: [civiliteId], references: [id])

  lienVictimeId String?
  lienVictime   LienVictimeEnum? @relation(fields: [lienVictimeId], references: [id])

  declarantDeId String?  @unique
  declarantDe   Requete? @relation("DeclarantRequete", fields: [declarantDeId], references: [id], onDelete: Cascade)

  requeteEntiteId String
  requete         Requete @relation("ParticipantsRequete", fields: [requeteEntiteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LienVictimeEnum {
  id    String @id @default(uuid())
  label String @unique

  PersonneConcernees PersonneConcernee[]
}

model AgeEnum {
  id    String @id
  label String @unique

  PersonneConcernees PersonneConcernee[]
}

model CiviliteEnum {
  id    String @id
  label String @unique

  personneConcernee PersonneConcernee[]
}

model Identite {
  id          String @id @default(uuid())
  prenom      String @default("")
  nom         String @default("")
  email       String @default("")
  telephone   String @default("")
  commentaire String @default("")

  personneConcerneeId String            @unique
  personneConcernee   PersonneConcernee @relation("PersonneIdentite", fields: [personneConcerneeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Adresse {
  id         String @id @default(uuid())
  label      String @default("")
  numero     String @default("")
  rue        String @default("")
  codePostal String @default("")
  ville      String @default("")

  personneConcerneeId String?            @unique
  personneConcernee   PersonneConcernee? @relation("PersonneAdresse", fields: [personneConcerneeId], references: [id], onDelete: Cascade)

  lieuDeSurvenueId String?         @unique
  lieuDeSurvenue   LieuDeSurvenue? @relation("LieuAdresse", fields: [lieuDeSurvenueId], references: [id], onDelete: Cascade)
}

model Situation {
  id String @id @default(uuid())

  lieuDeSurvenueId String         @unique
  lieuDeSurvenue   LieuDeSurvenue @relation("SituationLieu", fields: [lieuDeSurvenueId], references: [id], onDelete: Cascade)

  misEnCauses MisEnCause[]
  faits       Fait[]
  Requete     Requete?     @relation(fields: [requeteId], references: [id], onDelete: Cascade)
  requeteId   String?
}

model LieuDeSurvenue {
  id               String @id @default(uuid())
  nom              String @default("")
  codePostal       String @default("")
  societeTransport String @default("")
  finess           String @default("")
  commentaire      String @default("")

  adresse Adresse? @relation("LieuAdresse")

  lieuTypeId String?
  lieuType   LieuTypeEnum? @relation(fields: [lieuTypeId], references: [id])

  situation Situation? @relation("SituationLieu")

  transportTypeId String?
  transportType   TransportTypeEnum? @relation(fields: [transportTypeId], references: [id])
}

model LieuTypeEnum {
  id    String @id
  label String

  lieuxDeSurvenue LieuDeSurvenue[]
}

model TransportTypeEnum {
  id    String @id
  label String

  lieuxDeSurvenue LieuDeSurvenue[]
}

model MisEnCause {
  id           String   @id @default(uuid())
  estIdentifie Boolean?
  identite     String?
  rpps         String?
  commentaire  String   @default("")

  situationId String
  situation   Situation @relation(fields: [situationId], references: [id], onDelete: Cascade)

  professionTypeId String?
  professionType   ProfessionTypeEnum? @relation(fields: [professionTypeId], references: [id])

  misEnCauseTypeId String?
  misEnCauseType   MisEnCauseTypeEnum? @relation(fields: [misEnCauseTypeId], references: [id])

  professionDomicileTypeId String?
  professionDomicileType   ProfessionDomicileTypeEnum? @relation(fields: [professionDomicileTypeId], references: [id])
}

model MisEnCauseTypeEnum {
  id    String @id @default(uuid())
  label String @unique

  misEnCauses MisEnCause[]
}

model ProfessionTypeEnum {
  id    String @id @default(uuid())
  label String @unique

  misEnCauses MisEnCause[]
}

model ProfessionDomicileTypeEnum {
  id    String @id @default(uuid())
  label String @unique

  misEnCauses MisEnCause[]
}

model Fait {
  situationId String    @id
  situation   Situation @relation(fields: [situationId], references: [id], onDelete: Cascade)

  estMaltraitance Boolean?
  dateDebut       DateTime?
  dateFin         DateTime?
  commentaire     String    @default("")

  motifs            FaitMotif[]
  consequences      FaitConsequence[]
  maltraitanceTypes FaitMaltraitanceType[]
}

model MotifEnum {
  id    String @id @default(uuid())
  label String @unique

  faits FaitMotif[]
}

model ConsequenceEnum {
  id    String @id @default(uuid())
  label String @unique

  faits FaitConsequence[]
}

model MaltraitanceTypeEnum {
  id    String @id @default(uuid())
  label String @unique

  faits FaitMaltraitanceType[]
}

model FaitMotif {
  situationId String
  fait        Fait   @relation(fields: [situationId], references: [situationId], onDelete: Cascade)

  motifId String
  motif   MotifEnum @relation(fields: [motifId], references: [id])

  @@id([situationId, motifId])
}

model FaitConsequence {
  situationId String
  fait        Fait   @relation(fields: [situationId], references: [situationId], onDelete: Cascade)

  consequenceId String
  consequence   ConsequenceEnum @relation(fields: [consequenceId], references: [id])

  @@id([situationId, consequenceId])
}

model FaitMaltraitanceType {
  situationId String
  fait        Fait   @relation(fields: [situationId], references: [situationId], onDelete: Cascade)

  maltraitanceTypeId String
  maltraitanceType   MaltraitanceTypeEnum @relation(fields: [maltraitanceTypeId], references: [id])

  @@id([situationId, maltraitanceTypeId])
}

model RequeteEtape {
  id          String  @id @default(uuid())
  nom         String
  estPartagee Boolean @default(false)

  statutId String
  statut   RequeteStatutEnum @relation(fields: [statutId], references: [id])

  requeteId String
  Requete   Requete @relation(fields: [requeteId], references: [id], onDelete: Cascade)

  notes RequeteEtapeNote[]

  entiteId String
  entite   Entite @relation(fields: [entiteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequeteStatutEnum {
  id    String @id
  label String

  requeteEtapes RequeteEtape[]
}

model RequeteEtapeNote {
  id      String @id @default(uuid())
  content String

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  uploadedFiles UploadedFile[]

  requeteEtapeId String
  requeteEtape   RequeteEtape @relation(fields: [requeteEtapeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UploadedFile {
  id       String @id @default(uuid())
  fileName String
  filePath String @unique
  mimeType String
  size     Int
  status   String @default("PENDING") // e.g. "PENDING", "COMPLETED", "FAILED"

  metadata Json?

  entiteId String?
  entite   Entite? @relation(fields: [entiteId], references: [id])

  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  requeteEtapeNoteId String?
  requeteEtapeNote   RequeteEtapeNote? @relation(fields: [requeteEtapeNoteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entiteId])
}

model ChangeLog {
  id          String   @id @default(cuid())
  entity      String
  entityId    String
  action      String // e.g. "ADDED", "EDITED", "DELETED"
  before      Json?
  after       Json?
  changedById String
  changedBy   User     @relation(fields: [changedById], references: [id])
  changedAt   DateTime @default(now())

  @@index([entity, entityId])
  @@index([changedById])
}

model Crons {
  id        String    @id @default(uuid())
  name      String
  params    Json?
  result    Json?
  state     String
  createdAt DateTime  @default(now())
  startedAt DateTime
  endedAt   DateTime?
}
