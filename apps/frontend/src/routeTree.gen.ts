/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthAdminRouteRouteImport } from './routes/_auth/admin/route'
import { Route as AuthUserRouteRouteImport } from './routes/_auth/_user/route'
import { Route as AuthAdminEntitiesRouteImport } from './routes/_auth/admin/entities'
import { Route as AuthUserHomeRouteImport } from './routes/_auth/_user/home'
import { Route as AuthUserCasesRouteImport } from './routes/_auth/_user/cases'
import { Route as AuthAdminUsersRouteRouteImport } from './routes/_auth/admin/users/route'
import { Route as AuthAdminUsersIndexRouteImport } from './routes/_auth/admin/users/index'
import { Route as AuthAdminUsersAllRouteImport } from './routes/_auth/admin/users/all'
import { Route as AuthAdminUserUserIdRouteImport } from './routes/_auth/admin/user/$userId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAdminRouteRoute = AuthAdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthUserRouteRoute = AuthUserRouteRouteImport.update({
  id: '/_user',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthAdminEntitiesRoute = AuthAdminEntitiesRouteImport.update({
  id: '/entities',
  path: '/entities',
  getParentRoute: () => AuthAdminRouteRoute,
} as any)
const AuthUserHomeRoute = AuthUserHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthUserRouteRoute,
} as any)
const AuthUserCasesRoute = AuthUserCasesRouteImport.update({
  id: '/cases',
  path: '/cases',
  getParentRoute: () => AuthUserRouteRoute,
} as any)
const AuthAdminUsersRouteRoute = AuthAdminUsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthAdminRouteRoute,
} as any)
const AuthAdminUsersIndexRoute = AuthAdminUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthAdminUsersRouteRoute,
} as any)
const AuthAdminUsersAllRoute = AuthAdminUsersAllRouteImport.update({
  id: '/all',
  path: '/all',
  getParentRoute: () => AuthAdminUsersRouteRoute,
} as any)
const AuthAdminUserUserIdRoute = AuthAdminUserUserIdRouteImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => AuthAdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin': typeof AuthAdminRouteRouteWithChildren
  '/admin/users': typeof AuthAdminUsersRouteRouteWithChildren
  '/cases': typeof AuthUserCasesRoute
  '/home': typeof AuthUserHomeRoute
  '/admin/entities': typeof AuthAdminEntitiesRoute
  '/admin/user/$userId': typeof AuthAdminUserUserIdRoute
  '/admin/users/all': typeof AuthAdminUsersAllRoute
  '/admin/users/': typeof AuthAdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin': typeof AuthAdminRouteRouteWithChildren
  '/cases': typeof AuthUserCasesRoute
  '/home': typeof AuthUserHomeRoute
  '/admin/entities': typeof AuthAdminEntitiesRoute
  '/admin/user/$userId': typeof AuthAdminUserUserIdRoute
  '/admin/users/all': typeof AuthAdminUsersAllRoute
  '/admin/users': typeof AuthAdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/_user': typeof AuthUserRouteRouteWithChildren
  '/_auth/admin': typeof AuthAdminRouteRouteWithChildren
  '/_auth/admin/users': typeof AuthAdminUsersRouteRouteWithChildren
  '/_auth/_user/cases': typeof AuthUserCasesRoute
  '/_auth/_user/home': typeof AuthUserHomeRoute
  '/_auth/admin/entities': typeof AuthAdminEntitiesRoute
  '/_auth/admin/user/$userId': typeof AuthAdminUserUserIdRoute
  '/_auth/admin/users/all': typeof AuthAdminUsersAllRoute
  '/_auth/admin/users/': typeof AuthAdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/admin'
    | '/admin/users'
    | '/cases'
    | '/home'
    | '/admin/entities'
    | '/admin/user/$userId'
    | '/admin/users/all'
    | '/admin/users/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin'
    | '/cases'
    | '/home'
    | '/admin/entities'
    | '/admin/user/$userId'
    | '/admin/users/all'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/_auth/_user'
    | '/_auth/admin'
    | '/_auth/admin/users'
    | '/_auth/_user/cases'
    | '/_auth/_user/home'
    | '/_auth/admin/entities'
    | '/_auth/admin/user/$userId'
    | '/_auth/admin/users/all'
    | '/_auth/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/admin': {
      id: '/_auth/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthAdminRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/_user': {
      id: '/_auth/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthUserRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/admin/entities': {
      id: '/_auth/admin/entities'
      path: '/entities'
      fullPath: '/admin/entities'
      preLoaderRoute: typeof AuthAdminEntitiesRouteImport
      parentRoute: typeof AuthAdminRouteRoute
    }
    '/_auth/_user/home': {
      id: '/_auth/_user/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthUserHomeRouteImport
      parentRoute: typeof AuthUserRouteRoute
    }
    '/_auth/_user/cases': {
      id: '/_auth/_user/cases'
      path: '/cases'
      fullPath: '/cases'
      preLoaderRoute: typeof AuthUserCasesRouteImport
      parentRoute: typeof AuthUserRouteRoute
    }
    '/_auth/admin/users': {
      id: '/_auth/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AuthAdminUsersRouteRouteImport
      parentRoute: typeof AuthAdminRouteRoute
    }
    '/_auth/admin/users/': {
      id: '/_auth/admin/users/'
      path: '/'
      fullPath: '/admin/users/'
      preLoaderRoute: typeof AuthAdminUsersIndexRouteImport
      parentRoute: typeof AuthAdminUsersRouteRoute
    }
    '/_auth/admin/users/all': {
      id: '/_auth/admin/users/all'
      path: '/all'
      fullPath: '/admin/users/all'
      preLoaderRoute: typeof AuthAdminUsersAllRouteImport
      parentRoute: typeof AuthAdminUsersRouteRoute
    }
    '/_auth/admin/user/$userId': {
      id: '/_auth/admin/user/$userId'
      path: '/user/$userId'
      fullPath: '/admin/user/$userId'
      preLoaderRoute: typeof AuthAdminUserUserIdRouteImport
      parentRoute: typeof AuthAdminRouteRoute
    }
  }
}

interface AuthUserRouteRouteChildren {
  AuthUserCasesRoute: typeof AuthUserCasesRoute
  AuthUserHomeRoute: typeof AuthUserHomeRoute
}

const AuthUserRouteRouteChildren: AuthUserRouteRouteChildren = {
  AuthUserCasesRoute: AuthUserCasesRoute,
  AuthUserHomeRoute: AuthUserHomeRoute,
}

const AuthUserRouteRouteWithChildren = AuthUserRouteRoute._addFileChildren(
  AuthUserRouteRouteChildren,
)

interface AuthAdminUsersRouteRouteChildren {
  AuthAdminUsersAllRoute: typeof AuthAdminUsersAllRoute
  AuthAdminUsersIndexRoute: typeof AuthAdminUsersIndexRoute
}

const AuthAdminUsersRouteRouteChildren: AuthAdminUsersRouteRouteChildren = {
  AuthAdminUsersAllRoute: AuthAdminUsersAllRoute,
  AuthAdminUsersIndexRoute: AuthAdminUsersIndexRoute,
}

const AuthAdminUsersRouteRouteWithChildren =
  AuthAdminUsersRouteRoute._addFileChildren(AuthAdminUsersRouteRouteChildren)

interface AuthAdminRouteRouteChildren {
  AuthAdminUsersRouteRoute: typeof AuthAdminUsersRouteRouteWithChildren
  AuthAdminEntitiesRoute: typeof AuthAdminEntitiesRoute
  AuthAdminUserUserIdRoute: typeof AuthAdminUserUserIdRoute
}

const AuthAdminRouteRouteChildren: AuthAdminRouteRouteChildren = {
  AuthAdminUsersRouteRoute: AuthAdminUsersRouteRouteWithChildren,
  AuthAdminEntitiesRoute: AuthAdminEntitiesRoute,
  AuthAdminUserUserIdRoute: AuthAdminUserUserIdRoute,
}

const AuthAdminRouteRouteWithChildren = AuthAdminRouteRoute._addFileChildren(
  AuthAdminRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthUserRouteRoute: typeof AuthUserRouteRouteWithChildren
  AuthAdminRouteRoute: typeof AuthAdminRouteRouteWithChildren
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthUserRouteRoute: AuthUserRouteRouteWithChildren,
  AuthAdminRouteRoute: AuthAdminRouteRouteWithChildren,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
