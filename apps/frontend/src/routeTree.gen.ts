/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthHomeImport } from './routes/_auth/home'
import { Route as AuthEntitiesImport } from './routes/_auth/entities'
import { Route as AuthCasesImport } from './routes/_auth/cases'
import { Route as AuthAdministrationImport } from './routes/_auth/administration'
import { Route as AuthUserUserIdImport } from './routes/_auth/user.$userId'
import { Route as AuthusersUsersImport } from './routes/_auth/__users/users'
import { Route as AuthusersUsersIndexImport } from './routes/_auth/__users/users.index'
import { Route as AuthusersUsersAllImport } from './routes/_auth/__users/users.all'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthHomeRoute = AuthHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthEntitiesRoute = AuthEntitiesImport.update({
  id: '/entities',
  path: '/entities',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthCasesRoute = AuthCasesImport.update({
  id: '/cases',
  path: '/cases',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthAdministrationRoute = AuthAdministrationImport.update({
  id: '/administration',
  path: '/administration',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthUserUserIdRoute = AuthUserUserIdImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthusersUsersRoute = AuthusersUsersImport.update({
  id: '/__users/users',
  path: '/users',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthusersUsersIndexRoute = AuthusersUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthusersUsersRoute,
} as any)

const AuthusersUsersAllRoute = AuthusersUsersAllImport.update({
  id: '/all',
  path: '/all',
  getParentRoute: () => AuthusersUsersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/administration': {
      id: '/_auth/administration'
      path: '/administration'
      fullPath: '/administration'
      preLoaderRoute: typeof AuthAdministrationImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/cases': {
      id: '/_auth/cases'
      path: '/cases'
      fullPath: '/cases'
      preLoaderRoute: typeof AuthCasesImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/entities': {
      id: '/_auth/entities'
      path: '/entities'
      fullPath: '/entities'
      preLoaderRoute: typeof AuthEntitiesImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/home': {
      id: '/_auth/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthHomeImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/__users/users': {
      id: '/_auth/__users/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthusersUsersImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/user/$userId': {
      id: '/_auth/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof AuthUserUserIdImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/__users/users/all': {
      id: '/_auth/__users/users/all'
      path: '/all'
      fullPath: '/users/all'
      preLoaderRoute: typeof AuthusersUsersAllImport
      parentRoute: typeof AuthusersUsersImport
    }
    '/_auth/__users/users/': {
      id: '/_auth/__users/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof AuthusersUsersIndexImport
      parentRoute: typeof AuthusersUsersImport
    }
  }
}

// Create and export the route tree

interface AuthusersUsersRouteChildren {
  AuthusersUsersAllRoute: typeof AuthusersUsersAllRoute
  AuthusersUsersIndexRoute: typeof AuthusersUsersIndexRoute
}

const AuthusersUsersRouteChildren: AuthusersUsersRouteChildren = {
  AuthusersUsersAllRoute: AuthusersUsersAllRoute,
  AuthusersUsersIndexRoute: AuthusersUsersIndexRoute,
}

const AuthusersUsersRouteWithChildren = AuthusersUsersRoute._addFileChildren(
  AuthusersUsersRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthAdministrationRoute: typeof AuthAdministrationRoute
  AuthCasesRoute: typeof AuthCasesRoute
  AuthEntitiesRoute: typeof AuthEntitiesRoute
  AuthHomeRoute: typeof AuthHomeRoute
  AuthusersUsersRoute: typeof AuthusersUsersRouteWithChildren
  AuthUserUserIdRoute: typeof AuthUserUserIdRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAdministrationRoute: AuthAdministrationRoute,
  AuthCasesRoute: AuthCasesRoute,
  AuthEntitiesRoute: AuthEntitiesRoute,
  AuthHomeRoute: AuthHomeRoute,
  AuthusersUsersRoute: AuthusersUsersRouteWithChildren,
  AuthUserUserIdRoute: AuthUserUserIdRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/administration': typeof AuthAdministrationRoute
  '/cases': typeof AuthCasesRoute
  '/entities': typeof AuthEntitiesRoute
  '/home': typeof AuthHomeRoute
  '/users': typeof AuthusersUsersRouteWithChildren
  '/user/$userId': typeof AuthUserUserIdRoute
  '/users/all': typeof AuthusersUsersAllRoute
  '/users/': typeof AuthusersUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/administration': typeof AuthAdministrationRoute
  '/cases': typeof AuthCasesRoute
  '/entities': typeof AuthEntitiesRoute
  '/home': typeof AuthHomeRoute
  '/user/$userId': typeof AuthUserUserIdRoute
  '/users/all': typeof AuthusersUsersAllRoute
  '/users': typeof AuthusersUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/administration': typeof AuthAdministrationRoute
  '/_auth/cases': typeof AuthCasesRoute
  '/_auth/entities': typeof AuthEntitiesRoute
  '/_auth/home': typeof AuthHomeRoute
  '/_auth/__users/users': typeof AuthusersUsersRouteWithChildren
  '/_auth/user/$userId': typeof AuthUserUserIdRoute
  '/_auth/__users/users/all': typeof AuthusersUsersAllRoute
  '/_auth/__users/users/': typeof AuthusersUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/administration'
    | '/cases'
    | '/entities'
    | '/home'
    | '/users'
    | '/user/$userId'
    | '/users/all'
    | '/users/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/administration'
    | '/cases'
    | '/entities'
    | '/home'
    | '/user/$userId'
    | '/users/all'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/_auth/administration'
    | '/_auth/cases'
    | '/_auth/entities'
    | '/_auth/home'
    | '/_auth/__users/users'
    | '/_auth/user/$userId'
    | '/_auth/__users/users/all'
    | '/_auth/__users/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/administration",
        "/_auth/cases",
        "/_auth/entities",
        "/_auth/home",
        "/_auth/__users/users",
        "/_auth/user/$userId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/administration": {
      "filePath": "_auth/administration.tsx",
      "parent": "/_auth"
    },
    "/_auth/cases": {
      "filePath": "_auth/cases.tsx",
      "parent": "/_auth"
    },
    "/_auth/entities": {
      "filePath": "_auth/entities.tsx",
      "parent": "/_auth"
    },
    "/_auth/home": {
      "filePath": "_auth/home.tsx",
      "parent": "/_auth"
    },
    "/_auth/__users/users": {
      "filePath": "_auth/__users/users.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/__users/users/all",
        "/_auth/__users/users/"
      ]
    },
    "/_auth/user/$userId": {
      "filePath": "_auth/user.$userId.tsx",
      "parent": "/_auth"
    },
    "/_auth/__users/users/all": {
      "filePath": "_auth/__users/users.all.tsx",
      "parent": "/_auth/__users/users"
    },
    "/_auth/__users/users/": {
      "filePath": "_auth/__users/users.index.tsx",
      "parent": "/_auth/__users/users"
    }
  }
}
ROUTE_MANIFEST_END */
