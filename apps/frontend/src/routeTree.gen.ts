/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InactiveRouteImport } from './routes/inactive'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthAdminRouteRouteImport } from './routes/_auth/admin/route'
import { Route as AuthUserRouteRouteImport } from './routes/_auth/_user/route'
import { Route as AuthAdminEntitiesRouteImport } from './routes/_auth/admin/entities'
import { Route as AuthUserHomeRouteImport } from './routes/_auth/_user/home'
import { Route as AuthAdminUsersRouteRouteImport } from './routes/_auth/admin/users/route'
import { Route as AuthAdminUsersIndexRouteImport } from './routes/_auth/admin/users/index'
import { Route as AuthAdminUsersAllRouteImport } from './routes/_auth/admin/users/all'
import { Route as AuthAdminUserUserIdRouteImport } from './routes/_auth/admin/user/$userId'
import { Route as AuthUserRequestCreateRouteImport } from './routes/_auth/_user/request.create'
import { Route as AuthUserRequestRequestIdRouteImport } from './routes/_auth/_user/request.$requestId'
import { Route as AuthUserRequestRequestIdIndexRouteImport } from './routes/_auth/_user/request.$requestId.index'
import { Route as AuthUserRequestCreateDeclarantRouteImport } from './routes/_auth/_user/request.create.declarant'
import { Route as AuthUserRequestRequestIdProcessingRouteImport } from './routes/_auth/_user/request.$requestId/processing'
import { Route as AuthUserRequestRequestIdDeclarantRouteImport } from './routes/_auth/_user/request.$requestId.declarant'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InactiveRoute = InactiveRouteImport.update({
  id: '/inactive',
  path: '/inactive',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAdminRouteRoute = AuthAdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthUserRouteRoute = AuthUserRouteRouteImport.update({
  id: '/_user',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthAdminEntitiesRoute = AuthAdminEntitiesRouteImport.update({
  id: '/entities',
  path: '/entities',
  getParentRoute: () => AuthAdminRouteRoute,
} as any)
const AuthUserHomeRoute = AuthUserHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthUserRouteRoute,
} as any)
const AuthAdminUsersRouteRoute = AuthAdminUsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthAdminRouteRoute,
} as any)
const AuthAdminUsersIndexRoute = AuthAdminUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthAdminUsersRouteRoute,
} as any)
const AuthAdminUsersAllRoute = AuthAdminUsersAllRouteImport.update({
  id: '/all',
  path: '/all',
  getParentRoute: () => AuthAdminUsersRouteRoute,
} as any)
const AuthAdminUserUserIdRoute = AuthAdminUserUserIdRouteImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => AuthAdminRouteRoute,
} as any)
const AuthUserRequestCreateRoute = AuthUserRequestCreateRouteImport.update({
  id: '/request/create',
  path: '/request/create',
  getParentRoute: () => AuthUserRouteRoute,
} as any)
const AuthUserRequestRequestIdRoute =
  AuthUserRequestRequestIdRouteImport.update({
    id: '/request/$requestId',
    path: '/request/$requestId',
    getParentRoute: () => AuthUserRouteRoute,
  } as any)
const AuthUserRequestRequestIdIndexRoute =
  AuthUserRequestRequestIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthUserRequestRequestIdRoute,
  } as any)
const AuthUserRequestCreateDeclarantRoute =
  AuthUserRequestCreateDeclarantRouteImport.update({
    id: '/declarant',
    path: '/declarant',
    getParentRoute: () => AuthUserRequestCreateRoute,
  } as any)
const AuthUserRequestRequestIdProcessingRoute =
  AuthUserRequestRequestIdProcessingRouteImport.update({
    id: '/processing',
    path: '/processing',
    getParentRoute: () => AuthUserRequestRequestIdRoute,
  } as any)
const AuthUserRequestRequestIdDeclarantRoute =
  AuthUserRequestRequestIdDeclarantRouteImport.update({
    id: '/declarant',
    path: '/declarant',
    getParentRoute: () => AuthUserRequestRequestIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/inactive': typeof InactiveRoute
  '/login': typeof LoginRoute
  '/admin': typeof AuthAdminRouteRouteWithChildren
  '/admin/users': typeof AuthAdminUsersRouteRouteWithChildren
  '/home': typeof AuthUserHomeRoute
  '/admin/entities': typeof AuthAdminEntitiesRoute
  '/request/$requestId': typeof AuthUserRequestRequestIdRouteWithChildren
  '/request/create': typeof AuthUserRequestCreateRouteWithChildren
  '/admin/user/$userId': typeof AuthAdminUserUserIdRoute
  '/admin/users/all': typeof AuthAdminUsersAllRoute
  '/admin/users/': typeof AuthAdminUsersIndexRoute
  '/request/$requestId/declarant': typeof AuthUserRequestRequestIdDeclarantRoute
  '/request/$requestId/processing': typeof AuthUserRequestRequestIdProcessingRoute
  '/request/create/declarant': typeof AuthUserRequestCreateDeclarantRoute
  '/request/$requestId/': typeof AuthUserRequestRequestIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/inactive': typeof InactiveRoute
  '/login': typeof LoginRoute
  '/admin': typeof AuthAdminRouteRouteWithChildren
  '/home': typeof AuthUserHomeRoute
  '/admin/entities': typeof AuthAdminEntitiesRoute
  '/request/create': typeof AuthUserRequestCreateRouteWithChildren
  '/admin/user/$userId': typeof AuthAdminUserUserIdRoute
  '/admin/users/all': typeof AuthAdminUsersAllRoute
  '/admin/users': typeof AuthAdminUsersIndexRoute
  '/request/$requestId/declarant': typeof AuthUserRequestRequestIdDeclarantRoute
  '/request/$requestId/processing': typeof AuthUserRequestRequestIdProcessingRoute
  '/request/create/declarant': typeof AuthUserRequestCreateDeclarantRoute
  '/request/$requestId': typeof AuthUserRequestRequestIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/inactive': typeof InactiveRoute
  '/login': typeof LoginRoute
  '/_auth/_user': typeof AuthUserRouteRouteWithChildren
  '/_auth/admin': typeof AuthAdminRouteRouteWithChildren
  '/_auth/admin/users': typeof AuthAdminUsersRouteRouteWithChildren
  '/_auth/_user/home': typeof AuthUserHomeRoute
  '/_auth/admin/entities': typeof AuthAdminEntitiesRoute
  '/_auth/_user/request/$requestId': typeof AuthUserRequestRequestIdRouteWithChildren
  '/_auth/_user/request/create': typeof AuthUserRequestCreateRouteWithChildren
  '/_auth/admin/user/$userId': typeof AuthAdminUserUserIdRoute
  '/_auth/admin/users/all': typeof AuthAdminUsersAllRoute
  '/_auth/admin/users/': typeof AuthAdminUsersIndexRoute
  '/_auth/_user/request/$requestId/declarant': typeof AuthUserRequestRequestIdDeclarantRoute
  '/_auth/_user/request/$requestId/processing': typeof AuthUserRequestRequestIdProcessingRoute
  '/_auth/_user/request/create/declarant': typeof AuthUserRequestCreateDeclarantRoute
  '/_auth/_user/request/$requestId/': typeof AuthUserRequestRequestIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/inactive'
    | '/login'
    | '/admin'
    | '/admin/users'
    | '/home'
    | '/admin/entities'
    | '/request/$requestId'
    | '/request/create'
    | '/admin/user/$userId'
    | '/admin/users/all'
    | '/admin/users/'
    | '/request/$requestId/declarant'
    | '/request/$requestId/processing'
    | '/request/create/declarant'
    | '/request/$requestId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/inactive'
    | '/login'
    | '/admin'
    | '/home'
    | '/admin/entities'
    | '/request/create'
    | '/admin/user/$userId'
    | '/admin/users/all'
    | '/admin/users'
    | '/request/$requestId/declarant'
    | '/request/$requestId/processing'
    | '/request/create/declarant'
    | '/request/$requestId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/inactive'
    | '/login'
    | '/_auth/_user'
    | '/_auth/admin'
    | '/_auth/admin/users'
    | '/_auth/_user/home'
    | '/_auth/admin/entities'
    | '/_auth/_user/request/$requestId'
    | '/_auth/_user/request/create'
    | '/_auth/admin/user/$userId'
    | '/_auth/admin/users/all'
    | '/_auth/admin/users/'
    | '/_auth/_user/request/$requestId/declarant'
    | '/_auth/_user/request/$requestId/processing'
    | '/_auth/_user/request/create/declarant'
    | '/_auth/_user/request/$requestId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  InactiveRoute: typeof InactiveRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/inactive': {
      id: '/inactive'
      path: '/inactive'
      fullPath: '/inactive'
      preLoaderRoute: typeof InactiveRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/admin': {
      id: '/_auth/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthAdminRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/_user': {
      id: '/_auth/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthUserRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/admin/entities': {
      id: '/_auth/admin/entities'
      path: '/entities'
      fullPath: '/admin/entities'
      preLoaderRoute: typeof AuthAdminEntitiesRouteImport
      parentRoute: typeof AuthAdminRouteRoute
    }
    '/_auth/_user/home': {
      id: '/_auth/_user/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthUserHomeRouteImport
      parentRoute: typeof AuthUserRouteRoute
    }
    '/_auth/admin/users': {
      id: '/_auth/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AuthAdminUsersRouteRouteImport
      parentRoute: typeof AuthAdminRouteRoute
    }
    '/_auth/admin/users/': {
      id: '/_auth/admin/users/'
      path: '/'
      fullPath: '/admin/users/'
      preLoaderRoute: typeof AuthAdminUsersIndexRouteImport
      parentRoute: typeof AuthAdminUsersRouteRoute
    }
    '/_auth/admin/users/all': {
      id: '/_auth/admin/users/all'
      path: '/all'
      fullPath: '/admin/users/all'
      preLoaderRoute: typeof AuthAdminUsersAllRouteImport
      parentRoute: typeof AuthAdminUsersRouteRoute
    }
    '/_auth/admin/user/$userId': {
      id: '/_auth/admin/user/$userId'
      path: '/user/$userId'
      fullPath: '/admin/user/$userId'
      preLoaderRoute: typeof AuthAdminUserUserIdRouteImport
      parentRoute: typeof AuthAdminRouteRoute
    }
    '/_auth/_user/request/create': {
      id: '/_auth/_user/request/create'
      path: '/request/create'
      fullPath: '/request/create'
      preLoaderRoute: typeof AuthUserRequestCreateRouteImport
      parentRoute: typeof AuthUserRouteRoute
    }
    '/_auth/_user/request/$requestId': {
      id: '/_auth/_user/request/$requestId'
      path: '/request/$requestId'
      fullPath: '/request/$requestId'
      preLoaderRoute: typeof AuthUserRequestRequestIdRouteImport
      parentRoute: typeof AuthUserRouteRoute
    }
    '/_auth/_user/request/$requestId/': {
      id: '/_auth/_user/request/$requestId/'
      path: '/'
      fullPath: '/request/$requestId/'
      preLoaderRoute: typeof AuthUserRequestRequestIdIndexRouteImport
      parentRoute: typeof AuthUserRequestRequestIdRoute
    }
    '/_auth/_user/request/create/declarant': {
      id: '/_auth/_user/request/create/declarant'
      path: '/declarant'
      fullPath: '/request/create/declarant'
      preLoaderRoute: typeof AuthUserRequestCreateDeclarantRouteImport
      parentRoute: typeof AuthUserRequestCreateRoute
    }
    '/_auth/_user/request/$requestId/processing': {
      id: '/_auth/_user/request/$requestId/processing'
      path: '/processing'
      fullPath: '/request/$requestId/processing'
      preLoaderRoute: typeof AuthUserRequestRequestIdProcessingRouteImport
      parentRoute: typeof AuthUserRequestRequestIdRoute
    }
    '/_auth/_user/request/$requestId/declarant': {
      id: '/_auth/_user/request/$requestId/declarant'
      path: '/declarant'
      fullPath: '/request/$requestId/declarant'
      preLoaderRoute: typeof AuthUserRequestRequestIdDeclarantRouteImport
      parentRoute: typeof AuthUserRequestRequestIdRoute
    }
  }
}

interface AuthUserRequestRequestIdRouteChildren {
  AuthUserRequestRequestIdDeclarantRoute: typeof AuthUserRequestRequestIdDeclarantRoute
  AuthUserRequestRequestIdProcessingRoute: typeof AuthUserRequestRequestIdProcessingRoute
  AuthUserRequestRequestIdIndexRoute: typeof AuthUserRequestRequestIdIndexRoute
}

const AuthUserRequestRequestIdRouteChildren: AuthUserRequestRequestIdRouteChildren =
  {
    AuthUserRequestRequestIdDeclarantRoute:
      AuthUserRequestRequestIdDeclarantRoute,
    AuthUserRequestRequestIdProcessingRoute:
      AuthUserRequestRequestIdProcessingRoute,
    AuthUserRequestRequestIdIndexRoute: AuthUserRequestRequestIdIndexRoute,
  }

const AuthUserRequestRequestIdRouteWithChildren =
  AuthUserRequestRequestIdRoute._addFileChildren(
    AuthUserRequestRequestIdRouteChildren,
  )

interface AuthUserRequestCreateRouteChildren {
  AuthUserRequestCreateDeclarantRoute: typeof AuthUserRequestCreateDeclarantRoute
}

const AuthUserRequestCreateRouteChildren: AuthUserRequestCreateRouteChildren = {
  AuthUserRequestCreateDeclarantRoute: AuthUserRequestCreateDeclarantRoute,
}

const AuthUserRequestCreateRouteWithChildren =
  AuthUserRequestCreateRoute._addFileChildren(
    AuthUserRequestCreateRouteChildren,
  )

interface AuthUserRouteRouteChildren {
  AuthUserHomeRoute: typeof AuthUserHomeRoute
  AuthUserRequestRequestIdRoute: typeof AuthUserRequestRequestIdRouteWithChildren
  AuthUserRequestCreateRoute: typeof AuthUserRequestCreateRouteWithChildren
}

const AuthUserRouteRouteChildren: AuthUserRouteRouteChildren = {
  AuthUserHomeRoute: AuthUserHomeRoute,
  AuthUserRequestRequestIdRoute: AuthUserRequestRequestIdRouteWithChildren,
  AuthUserRequestCreateRoute: AuthUserRequestCreateRouteWithChildren,
}

const AuthUserRouteRouteWithChildren = AuthUserRouteRoute._addFileChildren(
  AuthUserRouteRouteChildren,
)

interface AuthAdminUsersRouteRouteChildren {
  AuthAdminUsersAllRoute: typeof AuthAdminUsersAllRoute
  AuthAdminUsersIndexRoute: typeof AuthAdminUsersIndexRoute
}

const AuthAdminUsersRouteRouteChildren: AuthAdminUsersRouteRouteChildren = {
  AuthAdminUsersAllRoute: AuthAdminUsersAllRoute,
  AuthAdminUsersIndexRoute: AuthAdminUsersIndexRoute,
}

const AuthAdminUsersRouteRouteWithChildren =
  AuthAdminUsersRouteRoute._addFileChildren(AuthAdminUsersRouteRouteChildren)

interface AuthAdminRouteRouteChildren {
  AuthAdminUsersRouteRoute: typeof AuthAdminUsersRouteRouteWithChildren
  AuthAdminEntitiesRoute: typeof AuthAdminEntitiesRoute
  AuthAdminUserUserIdRoute: typeof AuthAdminUserUserIdRoute
}

const AuthAdminRouteRouteChildren: AuthAdminRouteRouteChildren = {
  AuthAdminUsersRouteRoute: AuthAdminUsersRouteRouteWithChildren,
  AuthAdminEntitiesRoute: AuthAdminEntitiesRoute,
  AuthAdminUserUserIdRoute: AuthAdminUserUserIdRoute,
}

const AuthAdminRouteRouteWithChildren = AuthAdminRouteRoute._addFileChildren(
  AuthAdminRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthUserRouteRoute: typeof AuthUserRouteRouteWithChildren
  AuthAdminRouteRoute: typeof AuthAdminRouteRouteWithChildren
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthUserRouteRoute: AuthUserRouteRouteWithChildren,
  AuthAdminRouteRoute: AuthAdminRouteRouteWithChildren,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  InactiveRoute: InactiveRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
