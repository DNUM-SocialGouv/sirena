services:
  postgres:
    image: postgres:17-alpine
    container_name: sirena-postgres-dev
    environment:
      POSTGRES_DB: ${PG_SIRENA_DB}
      POSTGRES_USER: ${PG_SIRENA_USER}
      POSTGRES_PASSWORD: ${PG_SIRENA_PASSWORD}
    ports:
      - "127.0.0.1:${PG_PORT}:5432"
    networks:
      - sirena-postgres-network
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_SIRENA_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  studio:
    container_name: sirena-studio-dev
    build:
      dockerfile: ./apps/backend/Dockerfile.studio
    depends_on:
      - postgres
    ports:
      - "127.0.0.1:3015:5555"
    networks:
      - sirena-postgres-network
    environment:
      PG_URL: postgres://${PG_SIRENA_USER}:${PG_SIRENA_PASSWORD}@postgres:5432/${PG_SIRENA_DB}


  maildev:
    container_name: sirena-maildev-dev
    image: maildev/maildev:2.2.1
    restart: unless-stopped
    ports:
      - "127.0.0.1:1080:1080"
      - "127.0.0.1:1025:1025"

  minio:
    container_name: sirena-minio-dev
    image: minio/minio
    restart: unless-stopped
    volumes:
      - miniodata:/data
    ports:
      - "127.0.0.1:9000:9000" # MinIO api
      - "127.0.0.1:9001:9001" # MinIO admin console
    environment:
      MINIO_ROOT_USER: ${S3_BUCKET_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_BUCKET_SECRET_KEY}
      MINIO_REGION: ${S3_BUCKET_REGION}
    command: server /data --console-address ":9001"


volumes:
  pgdata:
  miniodata:

networks:
  sirena-postgres-network:
    driver: bridge
